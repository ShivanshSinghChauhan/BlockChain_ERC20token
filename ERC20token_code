pragma solidity ^0.4.24;

// When you deploy the contract on the block chain space, this contract will get assigned a address.
// When someone wants to transfer or send tokens to the contract address they will require the assigned 
// address;
// These token should not be send to the assigned address, else you might lose these token.

contract ERC20Interface{
    function totalSupply() public view returns (uint);
    function balanceOf(address tokenOwner) public view returns(uint balance);
    function transfer(address to, uint tokens) public returns (bool success);
    
    function allowance(address tokenOwner, address spender) public view returns(uint remaining);
    function approve(address spender, uint tokens) public returns(bool success);
    function transferFrom(address from, address to, uint tokens) public returns(bool success);
    
    event Trasfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    
}

contract Crypto is ERC20Interface{
    string public name = "Cryptos";
    string public symbol = "CRPT";
    uint public decimal = 0;
    
    // Total no of tokens 
    uint public supply;
    //The person who create the token(here I am the founder)
    address public founder;
    mapping(address => uint) public balances;
    
    mapping(address => mapping(address=>uint)) allowed;
    //allowed[0x111......][0x2222.....] = tokens;
    //allowed ek key word h. Ye approve function h. 
    //allowed[address_of_A][address_of_B] = 100
    
    event Transfer(address indexed from, address indexed to, uint tokens);
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    
    constructor() public{
        supply = 1000000;
        founder = msg.sender;
        balances[founder] = supply;
    }
    
    function allowance(address tokenOwner, address spender) public view returns(uint remaining){
        return allowed[tokenOwner][spender];
    }
    
    function approve(address spender, uint tokens) public returns(bool){
        require(balances[msg.sender] >= tokens);
        require(tokens>0);
        
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    }
    
    function transferFrom(address from, address to, uint tokens) public returns(bool){
        require(allowed[from][to] >= tokens); // allow agar 100 kiya h fhir token hume 100 se kam hi mange h
        require(balances[from] >= tokens);
        
        balances[from] -= tokens;
        balances[to] += tokens;
        
        return true;
        
    }
    
    function totalSupply() public view returns (uint){
        return supply;
    }
    
    function balanceOf(address tokenOwner) public view returns(uint balance){
        return balances[tokenOwner]; // jiska b address dala ho uska balance dikhaega 
    }
    
    // token (no of tokens) to the address (to) it will true be it is successful
    function transfer(address to, uint tokens) public returns (bool success){
        
        require(balances[msg.sender] >= tokens && tokens > 0);
        
        balances[to] += tokens;
        balances[msg.sender] -= tokens;
        emit Transfer(msg.sender, to, tokens);
        return true;
        
    }
    
}

// There are more approches but good approche is to derive the ICO contract from ERC token contract
contract CryptosICO is Crypto{
    address public admin;
    address public deposit;
    
    // token price in wei: 1CRPT = 0.001 ETHER, 1 ETHER = 1000 CRPT
    uint tokenPrice = 1000000000000000000;
    
    uint public hardCap = 3000000000000000000;
    
    uint public raisedAmount;
    
    uint public salesStart = now;
    
    uint public salesEnd = now + 604800; // one week
    
    uint public coinTradeStart = salesEnd + 604800; // transferable in a week after salesEnd
    
    uint public maxInvestment = 5000000000000000000;
    uint public minInvestment = 10000000000000000;
    
    enum State {beforeStart, running, afterEnd, halted}
    State public icoState;
    
    modifier onlyAdmin(){
        require(msg.sender == admin);
        _;
    }
    
    event Invest(address investor, uint value, uint tokens);
    
    constructor(address _deposit) public{
        deposit = _deposit;
        admin = msg.sender;
        icoState =  State.beforeStart;
    }
    
    function halt() public onlyAdmin{
        icoState = State.halted;
    }
    
    function unhalt() public onlyAdmin{
        icoState = State.running;
    }
    
    function changeDepositAddress(address newDeposit) public onlyAdmin{
        deposit = newDeposit;
    }
    
    function getCurrentState() public view returns(State){
        if(icoState == State.halted){
            return State.halted;
        }else if(block.timestamp < salesStart){
            return State.beforeStart;
        }else if(block.timestamp >= salesStart && block.timestamp <= salesEnd){
            return State.running;
        }else{
            return State.afterEnd;
        }
    }
    
    function invest() payable public returns(bool){
        //invest only in running
        
        icoState = getCurrentState();
        require(icoState == State.running);
        
        require(msg.value >= minInvestment && msg.value <= maxInvestment);
        
        uint tokens = msg.value / tokenPrice;
        
        //hardCap not reached
        require(raisedAmount + msg.value <= hardCap);
        
        raisedAmount += msg.value;
        
        // add token to investor balance from the founder balance
        balances[msg.sender] += tokens; // so that the investor can invest more later on
        balances[founder] -= tokens; // hamare(owner/founder) accound se katt jaega kyu ki hum hi offer kar rhe h sbko
        
        // good practice for security 
        deposit.transfer(msg.value); // transfer eth to the deposit address
        
        emit Invest(msg.sender, msg.value, tokens);
        
        return true;
    }
    
    function() payable public{
        invest();
    }
    
    // ico k liye ye transfer ho gai h 
    // kyu isse deploy karnge to upar wali base class k transfer ko ye wala override kar dega 
    function transfer(address to, uint value) public returns(bool){
        require(block.timestamp > coinTradeStart);
        super.transfer(to, value); // ye wala upar wale base class k transfer function ko call kar dega 
    }
    
    function transferFrom(address _from, address _to, uint _value) public returns(bool){
        require(block.timestamp > coinTradeStart);
        super.transferFrom( _from ,_to, _value); // ye wala upar wale base class k transfer function ko call kar dega 
    }
    
    // good practice to burn tocken if not sold. 
    function burn() public returns(bool){
        icoState = getCurrentState();
        require(icoState == State.afterEnd);
        balances[founder] = 0;
        return true;
    }
}
